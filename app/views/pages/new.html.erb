
<div id="container">
   <div class="row"> 
      <div class="contain">
        <div class="container__left">
          
        </div>
        <div class="resizer" id="dragMe"></div>
        <div class="container__right">
           <div id="yes-drop" class="drag-drop TTest">Drag Me!</div>  
        </div>
        </div>
      </div>
    </div>
    <div id="drag" class="resize-drag dropzone">
    </div>
    <!--<div id="mydiv" >-->
    <!--  <div id="mydivheader" class="dropzone"></div>-->
    <!--</div>-->
  </div>
</div>


<!--JavaScript for resizable menu-->
<script>
  // Query the element
const resizer = document.getElementById('dragMe');
const leftSide = resizer.previousElementSibling;
const rightSide = resizer.nextElementSibling;

// The current position of mouse
let x = 0;
let y = 0;

// Width of left side
let leftWidth = 0;

// Handle the mousedown event
// that's triggered when user drags the resizer
const mouseDownHandler = function (e) {
    // Get the current mouse position
    x = e.clientX;
    y = e.clientY;
    leftWidth = leftSide.getBoundingClientRect().width;

    // Attach the listeners to `document`
    document.addEventListener('mousemove', mouseMoveHandler);
    document.addEventListener('mouseup', mouseUpHandler);
};

// Attach the handler
resizer.addEventListener('mousedown', mouseDownHandler);

const mouseMoveHandler = function (e) {
    // How far the mouse has been moved
    const dx = e.clientX - x;
    const dy = e.clientY - y;

    const newLeftWidth = ((leftWidth + dx) * 100) / resizer.parentNode.getBoundingClientRect().width;
    leftSide.style.width = `${newLeftWidth}%`;
    resizer.style.cursor = 'col-resize';
    document.body.style.cursor = 'col-resize';
    leftSide.style.userSelect = 'none';
    leftSide.style.pointerEvents = 'none';

    rightSide.style.userSelect = 'none';
    rightSide.style.pointerEvents = 'none';
};

const mouseUpHandler = function () {
    resizer.style.removeProperty('cursor');
    document.body.style.removeProperty('cursor');

    leftSide.style.removeProperty('user-select');
    leftSide.style.removeProperty('pointer-events');

    rightSide.style.removeProperty('user-select');
    rightSide.style.removeProperty('pointer-events');

    // Remove the handlers of `mousemove` and `mouseup`
    document.removeEventListener('mousemove', mouseMoveHandler);
    document.removeEventListener('mouseup', mouseUpHandler);
};
</script>

<!--DragDrop from interactjs-->
<script src="https://unpkg.com/interactjs/dist/interact.min.js"></script>
<script>
function positionElement(el, x, y) {
  el.style.position = 'absolute';
  el.style.left = x + 'px';
  el.style.top = y + 'px';
}

const box = document.getElementById('yes-drop');
// target elements with the "draggable" class
interact('.draggable')
  .draggable({
    // enable inertial throwing
    inertia: false,
    // keep the element within the area of it's parent
    modifiers: [
      interact.modifiers.restrictRect({
        restriction: 'parent',
        endOnly: true
      })
    ],
    // enable autoScroll
    autoScroll: true,

    listeners: {
      // call this function on every dragmove event
      move: dragMoveListener,

      // call this function on every dragend event
      end (event) {
        var textEl = event.target.querySelector('p')

        textEl && (textEl.textContent =
          'moved a distance of ' +
          (Math.sqrt(Math.pow(event.pageX - event.x0, 2) +
                     Math.pow(event.pageY - event.y0, 2) | 0))
            .toFixed(2) + 'px')
      }
    }
  })

function dragMoveListener (event) {
  var target = event.target
  // keep the dragged position in the data-x/data-y attributes
  var x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx
  var y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy

  // translate the element
  target.style.transform = 'translate(' + x + 'px, ' + y + 'px)'

  // update the posiion attributes
  target.setAttribute('data-x', x)
  target.setAttribute('data-y', y)
}

// this function is used later in the resizing and gesture demos
window.dragMoveListener = dragMoveListener
/* The dragging code for '.draggable' from the demo above
 * applies to this demo as well so it doesn't have to be repeated. */

// enable draggables to be dropped into this
interact('.dropzone').dropzone({
  // only accept elements matching this CSS selector
  accept: '#yes-drop',
  // Require a 75% element overlap for a drop to be possible
  overlap: 1,

  // listen for drop related events:

  ondropactivate: function (event) {
    // add active dropzone feedback
    event.target.classList.add('drop-active')
  },
  ondragenter: function (event) {
    var draggableElement = event.relatedTarget
    var dropzoneElement = event.target

    // feedback the possibility of a drop
    dropzoneElement.classList.add('drop-target')
    draggableElement.classList.add('can-drop')
    draggableElement.textContent = 'Dragged in'
  },
  ondragleave: function (event) {
    // remove the drop feedback style
    event.target.classList.remove('drop-target')
    event.relatedTarget.classList.remove('can-drop')
    event.relatedTarget.textContent = 'Dragged out'    
   

  },
  ondrop: function (event) {
   
    event.relatedTarget.textContent = 'Dropped'
    
    // $('.resize-drag').append($('.TTest'));
     
  },
  ondropdeactivate: function (event) {
    // remove active dropzone feedback
    event.target.classList.remove('drop-active')
    event.target.classList.remove('drop-target')

  }
})

interact('.drag-drop')
  .draggable({
    inertia: false,
    modifiers: [
      interact.modifiers.restrictRect({
        endOnly: true
      })
    ],
    autoScroll: true,
    // dragMoveListener from the dragging demo above
    listeners: { move: dragMoveListener }
  })
</script>
<script>
    interact('.resize-drag').resizable({
    // resize from all edges and corners
    edges: { left: false, right: true, bottom: true, top: false },
    listeners: {
      move (event) {
        var target = event.target
        var x = (parseFloat(target.getAttribute('data-x')) || 0)
        var y = (parseFloat(target.getAttribute('data-y')) || 0)

        // update the element's style
        target.style.width = event.rect.width + 'px'
        target.style.height = event.rect.height + 'px'

        // translate when resizing from top or left edges
        x += event.deltaRect.left
        y += event.deltaRect.top

        target.style.transform = 'translate(' + x + 'px,' + y + 'px)'

        target.setAttribute('data-x', x)
        target.setAttribute('data-y', y)
        target.textContent = Math.round(event.rect.width) + '\u00D7' + Math.round(event.rect.height)
      }
    },
    modifiers: [
      // keep the edges inside the parent
      interact.modifiers.restrictEdges({
        outer: 'parent'
      }),

      // minimum size
      interact.modifiers.restrictSize({
        min: { width: 100, height: 50 }
      }),
      
      interact.modifiers.aspectRatio({
      // make sure the width is always double the height
      ratio: 2,
      // also restrict the size by nesting another modifier
      modifiers: [
        interact.modifiers.restrictSize({ max: 'parent' }),
      ],
    }),
    ],

    inertia: false
  })
  .draggable({
    listeners: { move: window.dragMoveListener },
    inertia: false,
    modifiers: [
      interact.modifiers.restrictRect({
        restriction: 'parent',
        endOnly: true
      })
    ]
  })
</script>

<!--JavaScript for draggable div-->
<!--<script>-->

 // Make the DIV element draggable:
<!-- dragElement(document.getElementById("mydiv"));-->

<!--function dragElement(elmnt) {-->
<!--  var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;-->
<!--  if (document.getElementById(elmnt.id + "header")) {-->
    // if present, the header is where you move the DIV from:
<!--    document.getElementById(elmnt.id + "header").onmousedown = dragMouseDown;-->
<!--  } else {-->
    // otherwise, move the DIV from anywhere inside the DIV:
<!--    elmnt.onmousedown = dragMouseDown;-->
<!--  }-->

<!--  function dragMouseDown(e) {-->
<!--    e = e || window.event;-->
<!--    e.preventDefault();-->
    // get the mouse cursor position at startup:
<!--    pos3 = e.clientX;-->
<!--    pos4 = e.clientY;-->
<!--    document.onmouseup = closeDragElement;-->
    // call a function whenever the cursor moves:
<!--    document.onmousemove = elementDrag;-->
<!--  }-->

<!--  function elementDrag(e) {-->
<!--    e = e || window.event;-->
<!--    e.preventDefault();-->
    // calculate the new cursor position:
<!--    pos1 = pos3 - e.clientX;-->
<!--    pos2 = pos4 - e.clientY;-->
<!--    pos3 = e.clientX;-->
<!--    pos4 = e.clientY;-->
    // set the element's new position:
<!--    elmnt.style.top = (elmnt.offsetTop - pos2) + "px";-->
<!--    elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";-->
<!--  }-->

<!--  function closeDragElement() {-->
    // stop moving when mouse button is released:
<!--    document.onmouseup = null;-->
<!--    document.onmousemove = null;-->
<!--  }-->
<!--}-->
<!--</script>-->
 
<!--Hides scrollbar-->
<style>

 body {
  overflow: hidden; /* Hide scrollbars */
 }
</style>

